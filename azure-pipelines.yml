variables:
  main_project: HeroesData\heroesdata.csproj
  publish_any_path: .\bin\publish\any\
  nupkg_path: .\bin\nupkg\any\
  publish_fde_win_path: .\bin\publish\fde\win-x64\
  publish_fde_osx_path: .\bin\publish\fde\osx-x64\
  publish_fde_linux_path: .\bin\publish\fde\linux-x64\
  publish_scd_win_path: .\bin\publish\scd\win-x64\
  publish_scd_osx_path: .\bin\publish\scd\osx-x64\
  publish_scd_linux_path: .\bin\publish\scd\linux-x64\

jobs:
- template: azure-pipelines-template.yml
  parameters:
    name: Linux
    pool:
      vmImage: 'ubuntu-latest'

- template: azure-pipelines-template.yml
  parameters:
    name: macOS
    pool:
      vmImage: 'macOS-latest'
  
- template: azure-pipelines-template.yml
  parameters:
    name: Windows
    pool:
      vmImage: 'windows-latest'
    
- job: Artifacts
  dependsOn:
    - Linux
    - macOS
    - Windows
  pool:
    vmImage: 'windows-latest'
  variables:
    - group: secret
  condition: and(succeeded(), ne(variables['build.Reason'], 'PullRequest'))
  steps:
    - task: DownloadSecureFile@1
      displayName: Download cert
      inputs:
        secureFile: certificate

    - task: UseDotNet@2
      displayName: 'Use .NET sdk'
      inputs:
        packageType: sdk
        version: 6.0.x
        installationPath: $(Agent.ToolsDirectory)\dotnet

    - task: NuGetToolInstaller@0
      displayName: nuget installer 6.1.0
      inputs:
        versionSpec: '6.1.0' 
   
    - powershell: |
        $csproj = get-content HeroesData\HeroesData.csproj
        $sv = $csproj | select-string -pattern "<Version>"
        $sv -match "<Version>(?<content>.*)</Version>"
        $value = $matches['content']
        $first_part_version,$build_version = $value.Split("-")
        $version = $first_part_version + "-build.$(Build.BuildNumber)"
        $csproj.replace($sv, "<Version>$version</Version>") | out-file $env:MAIN_PROJECT
        echo "Version - $version"
      displayName: Non-master version build number
      condition: and(succeeded(), ne(variables['Build.SourceBranch'], 'refs/heads/master'))

    - task: DotNetCoreCLI@2
      inputs:
        projects: $(MAIN_PROJECT)
        command: 'restore'
        includeNuGetOrg: true
      displayName: 'Restore'
      
    - powershell: dotnet publish $env:MAIN_PROJECT -c release --no-restore -o $env:PUBLISH_ANY_PATH
      displayName: Publish release [fdd-any]

    - powershell: dotnet pack $env:MAIN_PROJECT -c release --no-build -o $env:NUPKG_PATH       
      displayName: Nuget pack [fdd-any]

    - task: NuGetCommand@2
      displayName: Sign nuget pack
      inputs:
        command: 'custom'
        arguments: 'sign $(nupkg_path)HeroesDataParser.*.nupkg -CertificatePath $(Agent.TempDirectory)\certificate -CertificatePassword $(cert_password) -Timestamper http://ts.ssl.com'
           
    - powershell: |
        (get-content $env:MAIN_PROJECT).Replace('<PublishSingleFile>false</PublishSingleFile>','<PublishSingleFile>true</PublishSingleFile>') | out-file $env:MAIN_PROJECT
        $s = get-content $env:MAIN_PROJECT | select-string -pattern "<Version>"
        $s -match "<Version>(?<content>.*)</Version>"
        $m = $matches['content']        
        echo "##vso[task.setvariable variable=version]$m"
        echo "Version - $m"
      displayName: FDE and SCD Prep
                 
    - powershell: dotnet publish $env:MAIN_PROJECT -c release --self-contained false -r win-x64 -o $env:PUBLISH_FDE_WIN_PATH
      displayName: Publish release [fde-win-x64]

    - powershell: dotnet publish $env:MAIN_PROJECT -c release --self-contained false -r osx-x64 -o $env:PUBLISH_FDE_OSX_PATH
      displayName: Publish release [fde-osx-x64]

    - powershell: dotnet publish $env:MAIN_PROJECT -c release --self-contained false -r linux-x64 -o $env:PUBLISH_FDE_LINUX_PATH
      displayName: Publish release [fde-linux-x64]
      
    - powershell: dotnet publish $env:MAIN_PROJECT -c release --self-contained true -r win-x64 -o $env:PUBLISH_SCD_WIN_PATH
      displayName: Publish release [scd-win-x64]

    - powershell: dotnet publish $env:MAIN_PROJECT -c release --self-contained true -r osx-x64 -o $env:PUBLISH_SCD_OSX_PATH
      displayName: Publish release [scd-osx-x64]

    - powershell: dotnet publish $env:MAIN_PROJECT -c release --self-contained true -r linux-x64 -o $env:PUBLISH_SCD_LINUX_PATH
      displayName: Publish release [scd-linux-x64]
 
    - task: ArchiveFiles@2
      displayName: Archive [fdd-any] zip
      inputs:
        archiveType: 'zip'
        rootFolderOrFile: '$(publish_any_path)'
        includeRootFolder: false
        archiveFile: '$(Build.ArtifactStagingDirectory)\HeroesDataParser.$(version)-fdd-any.zip'

    - task: ArchiveFiles@2
      displayName: Archive [fdd-any] tar
      inputs:
        archiveType: 'zip'
        rootFolderOrFile: '$(publish_any_path)'
        includeRootFolder: false
        archiveFile: '$(Build.ArtifactStagingDirectory)\HeroesDataParser.$(version)-fdd-any.tar.gz'

    - task: ArchiveFiles@2
      displayName: Archive [fde-win-x64]
      inputs:
        archiveType: 'zip'
        rootFolderOrFile: '$(publish_fde_win_path)'
        includeRootFolder: false
        archiveFile: '$(Build.ArtifactStagingDirectory)\HeroesDataParser.$(version)-fde-win-x64.zip'

    - task: ArchiveFiles@2
      displayName: Archive [fde-osx-x64]
      inputs:
        archiveType: 'tar'
        rootFolderOrFile: '$(publish_fde_osx_path)'
        includeRootFolder: false
        archiveFile: '$(Build.ArtifactStagingDirectory)\HeroesDataParser.$(version)-fde-osx-x64.tar.gz'

    - task: ArchiveFiles@2
      displayName: Archive [fde-linux-x64]
      inputs:
        archiveType: 'tar'
        rootFolderOrFile: '$(publish_fde_linux_path)'
        includeRootFolder: false
        archiveFile: '$(Build.ArtifactStagingDirectory)\HeroesDataParser.$(version)-fde-linux-x64.tar.gz'
        
    - task: ArchiveFiles@2
      displayName: Archive [scd-win-x64]
      inputs:
        archiveType: 'zip'
        rootFolderOrFile: '$(publish_scd_win_path)'
        includeRootFolder: false
        archiveFile: '$(Build.ArtifactStagingDirectory)\HeroesDataParser.$(version)-scd-win-x64.zip'

    - task: ArchiveFiles@2
      displayName: Archive [scd-osx-x64]
      inputs:
        archiveType: 'tar'
        rootFolderOrFile: '$(publish_scd_osx_path)'
        includeRootFolder: false
        archiveFile: '$(Build.ArtifactStagingDirectory)\HeroesDataParser.$(version)-scd-osx-x64.tar.gz'

    - task: ArchiveFiles@2
      displayName: Archive [scd-linux-x64]
      inputs:
        archiveType: 'tar'
        rootFolderOrFile: '$(publish_scd_linux_path)'
        includeRootFolder: false
        archiveFile: '$(Build.ArtifactStagingDirectory)\HeroesDataParser.$(version)-scd-linux-x64.tar.gz'

    - task: PublishBuildArtifacts@1
      displayName: Publish artifacts [fdd-any] zip
      inputs:
        pathtoPublish: '$(Build.ArtifactStagingDirectory)\HeroesDataParser.$(version)-fdd-any.zip'
        artifactName: 'HeroesDataParser-fdd-any'

    - task: PublishBuildArtifacts@1
      displayName: Publish artifacts [fdd-any] tar
      inputs:
        pathtoPublish: '$(Build.ArtifactStagingDirectory)\HeroesDataParser.$(version)-fdd-any.tar.gz'
        artifactName: 'HeroesDataParser-fdd-any' 
        
    - task: PublishBuildArtifacts@1
      displayName: Publish artifacts [fde-win-x64]
      inputs:
        pathtoPublish: '$(Build.ArtifactStagingDirectory)\HeroesDataParser.$(version)-fde-win-x64.zip'
        artifactName: 'HeroesDataParser-fde-win-x64'  
 
    - task: PublishBuildArtifacts@1
      displayName: Publish artifacts [fde-osx-x64]
      inputs:
        pathtoPublish: '$(Build.ArtifactStagingDirectory)\HeroesDataParser.$(version)-fde-osx-x64.tar.gz'
        artifactName: 'HeroesDataParser-fde-osx-x64'  

    - task: PublishBuildArtifacts@1
      displayName: Publish artifacts [fde-linux-x64]
      inputs:
        pathtoPublish: '$(Build.ArtifactStagingDirectory)\HeroesDataParser.$(version)-fde-linux-x64.tar.gz'
        artifactName: 'HeroesDataParser-fde-linux-x64'  
        
    - task: PublishBuildArtifacts@1
      displayName: Publish artifacts [scd-win-x64]
      inputs:
        pathtoPublish: '$(Build.ArtifactStagingDirectory)\HeroesDataParser.$(version)-scd-win-x64.zip'
        artifactName: 'HeroesDataParser-scd-win-x64'  
 
    - task: PublishBuildArtifacts@1
      displayName: Publish artifacts [scd-osx-x64]
      inputs:
        pathtoPublish: '$(Build.ArtifactStagingDirectory)\HeroesDataParser.$(version)-scd-osx-x64.tar.gz'
        artifactName: 'HeroesDataParser-scd-osx-x64'  

    - task: PublishBuildArtifacts@1
      displayName: Publish artifacts [scd-linux-x64]
      inputs:
        pathtoPublish: '$(Build.ArtifactStagingDirectory)\HeroesDataParser.$(version)-scd-linux-x64.tar.gz'
        artifactName: 'HeroesDataParser-scd-linux-x64'  
        
    - task: PublishBuildArtifacts@1
      displayName: Publish artifact [nuget-fdd-any]
      inputs:
        pathtoPublish: '$(nupkg_path)'
        artifactName: 'HeroesDataParser-nuget-fdd-any'
  
