parameters:
  name: ''
  pool: ''
  artifacts: false
  deploy-nuget: false
  deploy-github: false

jobs:
  - job: ${{ parameters.name }}
    pool: ${{ parameters.pool }}
    variables:
      - group: secret
      - name: config_debug
        value: debug
      - name: config_release
        value: release
    strategy:
      matrix:
        Build_Debug:
          configuration: $(config_debug)
        Build_Release:
          configuration: $(config_release)
    steps:
    - task: DotNetCoreInstaller@0
      displayName: dotnet installer 2.2.100
      inputs:
        version: '2.2.100'
        
    - script: dotnet build -c $(configuration)
      displayName: Build
 
    - script: dotnet test -c $(configuration) --no-build --logger trx --collect "Code coverage"
      displayName: Run tests
      
    - task: PublishTestResults@2
      displayName: Publish tests
      inputs:
        testRunner: VSTest
        testResultsFiles: '**/*.trx'
        
    - ${{ if and(eq(parameters.artifacts, 'true'), eq(variables.configuration, release)) }}:
      - powershell: dotnet publish HeroesData\HeroesData.csproj -c release -o HeroesData\bin\publish\any\
        displayName: Publish release [fdd-any]
        
      - powershell: dotnet pack HeroesData\HeroesData.csproj -c release --no-build -o HeroesData\bin\nupkg\any\       
        displayName: Nuget pack [fdd-any]
        
      - task: DownloadSecureFile@1
        displayName: Download cert
        inputs:
          secureFile: certificate
        
      - powershell: nuget sign HeroesData\bin\nupkg\any\HeroesDataParser.*.nupkg -CertificatePath $env:DOWNLOADSECUREFILE_SECUREFILEPATH -CertificatePassword $(cert_password) -Timestamper http://timestamp.digicert.com
        displayName: Sign nuget pack
        
      - powershell: (get-content HeroesData\HeroesData.csproj).Replace('<PackAsTool>true</PackAsTool>','<PackAsTool>false</PackAsTool>') | out-file HeroesData\HeroesData_self.csproj
        displayName: SCD Prep
        
      - powershell: dotnet publish HeroesData\HeroesData_self.csproj -c release --self-contained -r win-x64 -o HeroesData\bin\publish\win-x64\
        displayName: Publish release [scd-win-x64]
    
      - powershell: dotnet publish HeroesData\HeroesData_self.csproj -c release --self-contained -r osx-x64 -o HeroesData\bin\publish\osx-x64\
        displayName: Publish release [scd-osx-x64]
        
      - powershell: dotnet publish HeroesData\HeroesData_self.csproj -c release --self-contained -r linux-x64 -o HeroesData\bin\publish\linux-x64\
        displayName: Publish release [scd-linux-x64]
        
      - task: PublishPipelineArtifact@0
        inputs:
          displayName: Publish Artifact [fdd]
          artifactName: 'HeroesDataParser-fdd-any'
          targetPath: 'HeroesData\bin\publish\any\'
          
      - task: PublishPipelineArtifact@0
        inputs:
          displayName: Publish Artifact [scd-win-x64]
          artifactName: 'HeroesDataParser-scd-win-x64'
          targetPath: 'HeroesData\bin\publish\win-x64\'
          
      - task: PublishPipelineArtifact@0
        inputs:
          displayName: Publish Artifact [scd-osx-x64]
          artifactName: 'HeroesDataParser-scd-osx-x64'
          targetPath: 'HeroesData\bin\publish\osx-x64\'
          
      - task: PublishPipelineArtifact@0
        inputs:
          displayName: Publish Artifact [scd-linux-x64]
          artifactName: 'HeroesDataParser-scd-linux-x64'
          targetPath: 'HeroesData\bin\publish\linux-x64\'
          
      - task: PublishPipelineArtifact@0
        inputs:
          displayName: Publish Artifact [nuget-pack-fdd-any]
          targetPath: 'HeroesData\bin\nupkg\any\HeroesDataParser.*.nupkg'
